"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

#import role.graphql
#import sanctum.graphql

input UserInput {
    firstname: String
    lastname: String
    nickname: String
    phone: String
    birthdate: Date
    email: String @rules(apply: ["bail", "email", "unique:users,email"])
    roles: [ID!] @rules(apply: ["exists:roles,id"])
}

"Indicates what fields are available at the top level of a query operation."
type Query @guard {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      firstname: String @where(operator: "like")
      orderBy: _ @orderBy(columns: ["id", "nickname", "firstname", "lastname", "birthdate"])
    ): [User!]! @can(ability: "viewAny") @paginate(defaultCount: 25) @softDeletes

    me: User @auth

    roles: [Role!]! @all

}

extend type Mutation @guard {
    updateUser(id: ID!, input: UserInput  @spread): User @can(ability: "update", injectArgs: true, model: "App\\Models\\User") @field(resolver: "\\App\\GraphQL\\Mutations\\UpdateUser")
    deleteUser(id: ID! @where(operator: "=")): User @delete @can(ability: "delete", find: "id")
}
