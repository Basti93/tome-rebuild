type Training @guard{
    id: ID!
    name: String
    description: String
    status: Boolean!
    date_start: DateTime!
    date_end: DateTime!
    location: Location @belongsTo
    athletes: [User!] @hasMany
    coaches: [User!] @hasMany
    groups: [Group!] @hasMany
    created_at: DateTime
    updated_at: DateTime
}

type TrainingUserPivot {
    attendance: Boolean
}

input TrainingInput {
    name: String
    description: String
    status: Boolean
    date_start: DateTime
    date_end: DateTime
    location: ID
    athletes: [ID!]
    coaches: [ID!]
    groups: [ID!]
}

input UpdateTrainingInput {
    name: String
    description: String
    status: Boolean
    date_start: DateTime
    date_end: DateTime
    location: UpdateTrainingLocationInput
    athletes: UpdateTrainingUserInput
    coaches: UpdateTrainingUserInput
    groups: UpdateTrainingGroupInput
}

input UpdateTrainingAttendanceInput {
    attend: Boolean
}

input UpdateTrainingLocationInput {
    connect: ID
}


input UpdateTrainingUserInput {
    sync: [ConnectTrainingUser!]
    delete: [ID!]
    connect: [ConnectTrainingUser!]
    disconnect: [ID!]
}

input UpdateTrainingGroupInput {
    sync: [ID!]
    delete: [ID!]
    connect: [ID!]
    disconnect: [ID!]
}

input ConnectTrainingUser {
    id: ID!
    role: TrainingRole
    attendance: Boolean
}

enum TrainingRole {
    athlete
    coach
}

extend type Query @guard {
    "Find a single training by an identifying attribute."
    training(
        "Search by primary key."
        id: ID! @eq
    ): Training @find @can(ability: "view", find: "id")

    "List multiple trainings."
    trainings(
        "Filters to apply to the query."
        where: _ @whereConditions(columns: ["id", "status", "date_start", "date_end", "groups", "location", "athlete", "coach", "created_at"])
        name: String @where(operator: "like")
        description: String @where(operator: "like")
        "Sort the results by one or more attributes."
        orderBy: _ @orderBy(columns: ["id", "status", "date_start", "date_end", "created_at"], relations: [{ relation: "athletes"}])
    ): [Training!]! @can(ability: "viewAny") @paginate(defaultCount: 25) @softDeletes

}

extend type Mutation @guard {
    createTraining(input: UpdateTrainingInput  @spread): Training! @can(ability: "create") @create
    updateTraining(id: ID!, input: UpdateTrainingInput  @spread): Training! @can(ability: "update") @update
    updateTrainingAttendance(id: ID!, attend: Boolean!): Training! @can(ability: "updateAttendance", injectArgs: true) @field(resolver: "\\App\\GraphQL\\Mutations\\UpdateTrainingAttendance")
    deleteTraining(id: ID! @where(operator: "=")): Training @delete @can(ability: "delete", find: "id")
}

